networks:
  ml_logging:
    driver: bridge
  postgres:
    driver: bridge
  s3:
    driver: bridge

services:
  minio:
    container_name: minio
    hostname: minio
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    expose:
      - "9000"
      - "9001"
    networks:
      - s3
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_REGION: ${AWS_REGION}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
    - ./data/mlflow/minio/:/data
    - ./Makefile:/home/Makefile:ro

  create_buckets:
    image: minio/minio:latest
    volumes:
    - ./data/mlflow/minio/:/data
    networks:
      - s3
    depends_on:
      - minio
    # echoed lines are left intentionally, the docs aren't very informative and it's good
    # to know what we have available for something like this
    entrypoint: >
      /bin/sh -c "
      echo mc config host add aws http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      mc alias set s3 http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      echo /usr/bin/mc rm -r --force myminio/somebucketname;
      mc mb s3/${AWS_S3_BUCKET_NAME} --ignore-existing --region ${AWS_REGION};
      echo /usr/bin/mc policy download myminio/somebucketname;
      exit 0;
      "

  nginx:
    image: nginx:1.19.2-alpine
    container_name: nginx
    hostname: nginx
    volumes:
    - ./mlflow/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
    - "9000:9000"
    - "9001:9001"
    networks:
    - s3
    depends_on:
    - minio

  postgresql:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
    - ./data/mlflow/postgres/:/data/postgres
    ports:
    - "5432:5432"
    networks:
    - postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
    - ./data/mlflow/pgadmin/:/var/lib/pgadmin
    ports:
    - "5050:80"
    networks:
    - postgres

  mlflow:
    restart: always
    build: ./mlflow
    container_name: mlflow_server
    # image: mlflow_server
    ports:
    - "5000:5000"
    networks:
    - postgres
    - s3
    - ml_logging
    environment:
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql/${POSTGRES_DB} --default-artifact-root s3://${AWS_S3_BUCKET_NAME}/ --host 0.0.0.0
    depends_on:
    - nginx
    - postgresql

  ml_model_dev_cpu:
    build: ./ml_model
    container_name: ml_model_dev_cpu
    networks:
    - ml_logging
    - s3
    volumes:
    - ./ml_model:/app/ml_model
    # - ~/.aws/:/root/.aws:ro # If AWS credentials need to be passed, or use environment
    environment:
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: sh -c "tail -f /dev/null"
    depends_on:
      - mlflow

  ml_model_train_cpu:
    build: ./ml_model
    container_name: ml_model_train_cpu
    networks:
    - ml_logging
    - s3
    volumes:
    - ./ml_model:/app/ml_model
    # - ~/.aws/:/root/.aws:ro # If AWS credentials need to be passed, or use environment
    environment:
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: conda run --no-capture-output -n ml_model python train.py
    depends_on:
     - mlflow

  mlflow_test:
    build: ./ml_model
    container_name: mlflow_test
    networks:
    - ml_logging
    - s3
    volumes:
    - ./test/mlflow_test.py:/app/ml_model/mlflow_test.py
    environment:
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: conda run --no-capture-output -n ml_model python mlflow_test.py --alpha=0.5 --l1-ratio=0.8
    depends_on:
    - mlflow

  test:
    build: ./test
    container_name: test
    # networks:
    # - ml_logging
    # - s3
    volumes:
    - ./:/ml_model/
    # environment:
    # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    # - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: sh -c "tail -f /dev/null"
    # depends_on:
    # - mlflow

  gpu_capable:
    build:
      context: ./Docker/dockerfiles/gpu
    networks:
    - ml_logging
    - s3
    volumes:
    - ./ml_model/config:/app/ml_model/config
    - ./ml_model/data:/app/ml_model/data
    - ./ml_model/logs:/app/ml_model/logs
    - ./ml_model/utils:/app/ml_model/utils
    # - ~/.aws/:/root/.aws:ro # If AWS credentials need to be passed, or use environment
    environment:
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: >
      sh -c "tail -f /dev/null"
    deploy:
      resources:
        reservations:
          devices:
          - capabilities: ["nvidia-compute"]
            driver: nvidia

  fastapi:
    build:
      context: ./fastapi
    container_name: fastapi_server
    networks:
      - ml_logging
      - s3
    volumes:
    - ./fastapi:/app/fastapi
    - ./ml_model:/app/fastapi/ml_model
    ports:
    - "8000:8000"
    environment:
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
    - mlflow
    command:  conda run --no-capture-output -n fastapi uvicorn main:app --reload --host 0.0.0.0
